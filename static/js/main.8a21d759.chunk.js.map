{"version":3,"sources":["assets/img/twitter-logo.png","components/Header/Header.js","components/ModalContainer/ModalContainer.js","components/FormSendTweet/FormSendTweet.js","utils/constant.js","components/SentTweet/SendTweet.js","components/Tweet/Tweet.js","components/ListTweets/ListTweets.js","App.js","reportWebVitals.js","index.js"],"names":["Header","className","src","TwitterLogo","alt","ModalContainer","props","isOpenModal","closeModal","children","Modal","open","onClose","closeAfterTransition","FormSendTweet","sendTweet","useState","name","tweet","formValue","setFormValue","onSubmit","event","onChange","target","value","FormControl","FormGroup","TextField","type","placeholder","margin","multiline","rows","Button","TWEETS_STORAGE","SendTweet","setToastProps","allTweets","setIsOpenModal","Fab","color","aria-label","onClick","preventDefault","allTweetsArray","time","moment","push","localStorage","setItem","JSON","stringify","text","Tweet","index","deleteTweet","Card","CardContent","format","ListTweets","length","Grid","container","spacing","map","item","xs","sm","App","toastProps","setAllTweets","reloadTweets","setReloadTweets","useEffect","AllTweetsStorage","getItem","parse","Container","maxWidth","splice","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","message","id","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8a21d759.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.b413b75b.png\";","import React from \"react\";\r\nimport TwitterLogo from \"../../assets/img/twitter-logo.png\";\r\n\r\nimport \"./Header.scss\";\r\n\r\nexport default function Header(){\r\n    return (\r\n        <div className=\"header\">\r\n            <img src={TwitterLogo} alt=\"Tweets Simulator\"/>\r\n            <h1>Tweets Simulator</h1>\r\n        </div>\r\n    );\r\n};","import React from \"react\";\r\nimport {Modal} from \"@material-ui/core\";\r\n\r\nimport \"./ModalContainer.scss\";\r\n\r\n\r\nexport default function ModalContainer(props) {\r\n    const {isOpenModal, closeModal, children} = props;\r\n\r\n    return (\r\n        <Modal\r\n            className=\"modal-container\"\r\n            open={isOpenModal}\r\n            onClose={closeModal}\r\n            closeAfterTransition\r\n        >\r\n            <div>{children}</div>\r\n        </Modal>\r\n    );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport {FormControl, FormGroup, TextField, Button} from \"@material-ui/core\";\r\n\r\nimport \"./FormSendTweet.scss\";\r\n\r\nexport default function FormSendTweet(props){\r\n    const {sendTweet} = props;\r\n    const [formValue, setFormValue] = useState({\r\n        name: \"\",\r\n        tweet: \"\"\r\n    });\r\n\r\n    const onFormChange = (event) => {\r\n        setFormValue({\r\n            ...formValue,\r\n            [event.target.name]: event.target.value\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className=\"form-send-tweet\">\r\n            <h2 className=\"form-send-tweet__title\">Enviar Tweet</h2>\r\n            <form \r\n                className=\"form-send-tweet__form\" \r\n                onSubmit={(event) => sendTweet(event, formValue)}\r\n                onChange={onFormChange}\r\n                >\r\n                <FormControl>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            className=\"form-send-tweet__form-name\"\r\n                            type=\"text\"\r\n                            name=\"name\"\r\n                            placeholder=\"Nombre de usuario\"\r\n                            margin=\"normal\"\r\n                        />\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            className=\"form-send-tweet__form-textarea\"\r\n                            name=\"tweet\"\r\n                            multiline\r\n                            rows=\"6\"\r\n                            placeholder=\"Escribe tu tweet\"\r\n                            margin=\"normal\"\r\n                        />\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Button type=\"submit\">Enviar tweet</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n","export const TWEETS_STORAGE = \"tweet-lt\";","import React, {useState} from \"react\";\r\nimport {Fab} from \"@material-ui/core\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport moment from \"moment\";\r\nimport ModalContainer from \"../ModalContainer\";\r\nimport FormSendTweet from \"../FormSendTweet\";\r\nimport {TWEETS_STORAGE} from \"../../utils/constant\";\r\n\r\nimport \"./SendTweet.scss\";\r\n\r\nexport default function SendTweet(props) {\r\n    const {setToastProps, allTweets} = props;\r\n    const [isOpenModal, setIsOpenModal] = useState(false);\r\n\r\n    const openModal = () => {\r\n        setIsOpenModal(true);\r\n    };\r\n\r\n    const closeModal = () => {\r\n        setIsOpenModal(false);\r\n    };\r\n\r\n    const sendTweet = (event, formValue) => {\r\n        event.preventDefault();\r\n        const {name, tweet} = formValue;\r\n        let allTweetsArray = [];\r\n\r\n        if(allTweets){\r\n            allTweetsArray = allTweets;\r\n        }\r\n\r\n        if(!name || !tweet){\r\n            setToastProps({\r\n                open: true,\r\n                text: \"WARNING: Todos los campos son obligatorios\"\r\n            })\r\n        } else {\r\n            formValue.time = moment();\r\n            allTweetsArray.push(formValue);\r\n            localStorage.setItem(TWEETS_STORAGE, JSON.stringify(allTweetsArray));\r\n            setToastProps({\r\n                open: true,\r\n                text:\"Tweet enviado correctamente\"\r\n            })\r\n            closeModal();\r\n        }\r\n        allTweetsArray = [];\r\n    }\r\n\r\n    return (\r\n        <div className=\"send-tweet\">\r\n            <Fab className=\"send-tweet__open-modal\" color=\"primary\" aria-label=\"add\" onClick={openModal}>\r\n                <AddIcon/>\r\n            </Fab>\r\n            <ModalContainer isOpenModal={isOpenModal} closeModal={closeModal}>\r\n                <FormSendTweet sendTweet={sendTweet}/>\r\n            </ModalContainer>\r\n        </div>\r\n    );\r\n}","import React from \"react\";\r\nimport {Card, CardContent} from \"@material-ui/core\";\r\nimport DeleteTwoToneIcon from \"@material-ui/icons/DeleteTwoTone\";\r\nimport moment from \"moment\";\r\n\r\nimport \"./Tweet.scss\";\r\n\r\nexport default function Tweet(props){\r\n    const {tweet:{name, tweet, time}, index, deleteTweet} = props;\r\n    \r\n    return (\r\n        <Card className=\"tweet\">\r\n            <CardContent>\r\n                <div className=\"tweet__header\">\r\n                    <h5>{name}</h5>\r\n                    <DeleteTwoToneIcon onClick={() => deleteTweet(index)}/>\r\n                </div>\r\n                <p>{tweet}</p>\r\n                <div className=\"tweet__date-add-tweet\">\r\n                   {moment(time).format(\"DD/MM/YYYY HH:mm\")}\r\n                </div>\r\n            </CardContent>\r\n        </Card>\r\n    )\r\n}","import React from \"react\";\r\nimport {Grid} from \"@material-ui/core\";\r\nimport Tweet from \"../Tweet\";\r\n\r\nimport \"./ListTweets.scss\";\r\n\r\nexport default function ListTweets(props){\r\n    const {allTweets, deleteTweet} = props;\r\n\r\n    if(!allTweets || allTweets.length === 0){\r\n        return (\r\n            <div className=\"list-tweets-empty\">\r\n                <h2>No hay Tweets</h2>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Grid container spacing={3} className=\"list-tweets\">\r\n            {allTweets.map((tweet, index) => (\r\n                <Grid key={index} item xs={12} sm={3}>\r\n                    <Tweet\r\n                        tweet={tweet}\r\n                        index={index}\r\n                        deleteTweet={deleteTweet}\r\n                    />\r\n                </Grid>\r\n            ))}\r\n        </Grid>\r\n    );\r\n}","import React, {useState, useEffect} from \"react\";\nimport {Container, Snackbar} from \"@material-ui/core\";\nimport Header from \"./components/Header\";\nimport SendTweet from \"./components/SentTweet\";\nimport ListTweets from \"./components/ListTweets\";\n\nimport {TWEETS_STORAGE} from \"./utils/constant\";\n\nfunction App() {\n  const [toastProps, setToastProps] = useState({\n    open: false,\n    text: null\n  })\n\n  const [allTweets, setAllTweets] = useState([]);\n  const[reloadTweets, setReloadTweets] = useState(false);\n\n  useEffect(() => {\n    const AllTweetsStorage = localStorage.getItem(TWEETS_STORAGE);\n    const allTweetsArray = JSON.parse(AllTweetsStorage);\n    setAllTweets(allTweetsArray);\n    setReloadTweets(false);\n  }, [reloadTweets])\n\n  const deleteTweet = (index) => {\n    allTweets.splice(index, 1);\n    setAllTweets(allTweets);\n    localStorage.setItem(TWEETS_STORAGE, JSON.stringify(allTweets));\n    setReloadTweets(true);\n  }\n\n  return (\n    <Container className=\"tweets-simulator\" maxWidth={false}>\n      <Header />\n      <SendTweet setToastProps={setToastProps} allTweets={allTweets}/>\n      <ListTweets allTweets={allTweets} deleteTweet={deleteTweet}/>\n      <Snackbar \n        anchorOrigin={{\n          vertical: \"top\",\n          horizontal: \"right\"\n        }}\n        open={toastProps.open}\n        autoHideDuration={2000}\n        onClose={() => setToastProps({open: false})}\n        message={<span id=\"message-id\">{toastProps.text}</span>}\n      />\n    </Container>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}